buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
        classpath 'org.ajoberstar:gradle-git-publish:0.2.1'
    }
}

def depVersions = [
        commercetoolsSdkJvm: '1.8.0', // 1.16.0
        assertJ: '3.4.1', // 3.6.2
        mockito: '1.9.5', // 2.7.22'
        junit: '4.12'
]

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }

    group = 'com.commercetools.payment'
    version = '0.6.1-SNAPSHOT'
    description "The commercetools java payment project intend is to make payment integration easy"

    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    def jvmSdkVersion = '1.8.0' // 1.16.0

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

subprojects {

    apply plugin: 'maven'

    // package sources and javadoc to jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':common') {
    description "Common API interfaces and methods for $rootProject.name"

    dependencies {
        compile "com.commercetools.sdk.jvm.core:commercetools-models:$depVersions.commercetoolsSdkJvm"
        compile "com.commercetools.sdk.jvm.core:commercetools-java-client:$depVersions.commercetoolsSdkJvm"

        testCompile "junit:junit:$depVersions.junit"
        testCompile "org.assertj:assertj-core:$depVersions.assertJ"
        testCompile "org.mockito:mockito-core:$depVersions.mockito"
    }
}

project(':nopsp-adapter') {
    description "Simple mock payment implementation (\"free-to-pay\") for $rootProject.name"

    dependencies {
        compile project(':common')
    }
}

project(':payone-adapter') {
    description "Implementation of Payone PSP specific methods and transactions."

    dependencies {
        compile project(':common')

        testCompile "junit:junit:$depVersions.junit"
        testCompile "org.assertj:assertj-core:$depVersions.assertJ"
        testCompile "org.mockito:mockito-core:$depVersions.mockito"
    }
}

project(':') {

    description "Unit and Integration tests to verify $rootProject.name build"

    // aggregate all javadocs to project.buildDir/docs/javadoc
    // see https://github.com/nebula-plugins/gradle-aggregate-javadocs-plugin
    apply plugin: 'nebula-aggregate-javadocs'
    apply plugin: 'org.ajoberstar.git-publish'

    // Integration tests configuration
    // TODO: carry out to a separate sub-project or task

    dependencies {
        compile project(':common'), project(':nopsp-adapter'), project(':payone-adapter')

        testCompile "junit:junit:$depVersions.junit"
        testCompile "org.assertj:assertj-core:$depVersions.assertJ"
    }

    // run the integration tests after all other subtasks
    configure(subprojects) {
        rootProject.compileJava.mustRunAfter.add(it.build)
    }

    sourceSets {
        integrationTest {
            java {
                //compileClasspath += main.output + test.output
                //runtimeClasspath += main.output + test.output
                srcDir file('src/it/') // TODO: move to src/it/java, or even better to integration-test/src/it/java
            }
            resources.srcDir file('src/it/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        //outputs.upToDateWhen { false } // uncommect this section if you want re-run the tests every build, even when no changes have been done
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    // publish aggregated javadoc to the repo, https://github.com/ajoberstar/gradle-git-publish
    gitPublish {
        // NOTE: $GRGIT_USER environment variable must be set to actual github token
        // see http://ajoberstar.org/grgit/docs/groovydoc/index.html?org/ajoberstar/grgit/auth/AuthConfig.html
        // https://github.com/ajoberstar/grgit#usage

        repoUri = 'https://github.com/commercetools/project-payment.git'
        branch = 'gh-pages'

        contents {
            from(javadoc) {
                into 'javadoc'
            }
        }

        commitMessage = "Publishing a new java doc for $version"
    }
}
